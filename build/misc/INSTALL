Installing and using the binary distribution

The binary release includes only the binary compiled ‘.class’ versions of the 
same ‘.java’ source files in the source release. It does include online documentation
(request platform dependent help), so you probably want the source release in addition 
to the binary release. The purpose of the binary release is just to save you time and 
trouble of compiling the sources.

The binary release depends on certain "Java 6" features corresponding to JDK 1.6. 

The binary release comes as a .zip or tar.gz archive which contains several .jar files. 
Extract this archive to some suitable location, such as /usr/local/DataExplorer.

Then, before you can actually run DataExplorer, you need to change directory to the 
installation location and execute the shell script or on MS-Windows the executable.
Some classpath don't need to be set. It will build some classpath dynamically to find
dependent libraries as well as the device plug-ins.


Installing and using the source distribution

The DataExplorer release normally comes as zip or gzip-compressed tar file named 
‘dataexplorer_<version>_source.zip’. Two methods are supporting for compiling the 
DataExplorer sources; choose whichever is most convenient for you.

One method uses the traditional GNU configure script, followed by running make. This 
works well on Unix-like systems, such as GNU/Linux. It does work well under 
Microsoft Windows, only when using the CygWin Unix-emulation package.

The other method uses the ant command, a Java-based build system released by Apache's 
Jakarta project. This uses an build.xml file in place of Makefiles, and works on all 
systems. However, the ant method does not support all the features of the configure+make method.

Build DataExplorer using configure and make

In your build directory do:

unzip dataexplorer-<version>-src.zip
cd dataexplorer-<version>

Then you must configure the sources. This you can do the same way you configure most other 
GNU software. Normally you can just run the configure script with no arguments:

./configure

This will specify that a later make install will install the compiled files into /usr/local/DataExplorer. 
If you want them to be installed someplace else, such as $PREFIX/DataExplorer, then specify that when 
you run configure:

./configure --prefix $PREFIX

If you have installed DataExplorer before, make sure you have removed menu entries.

Then you need to compile all the .java source files. Just run make:

make

This assumes that ‘java’ and ‘javac’ are the java interpreter and compiler and for
1) Java SDK which is required to set JAVA_HOME and PATH to javac executable
2) ant which is required to set ANT_HOME and PATH to ant executable
are exported to your shell environment.

You can install the compiled files:

make install

This will install your classes into $PREFIX/DataExplorer (and its sub-directories). Here $PREFIX is 
the directory you specified to configure with the --prefix option, or /usr/local if you did not 
specify a --prefix option.

To use the installed files, you need to swith to $PREFIX/DataExplorer and execute the existing 
shell script or for MS-windows the executable. This will set install menu entries.

Build DataExplorer using ant

DataExplorer includes Ant buildfiles (build.xml). Ant is a part of the Apache Jakarta project. 
If you don't hava Ant installed, get it from http://ant.apache.org/bindownload.cgi. The buildfile 
should work with Ant > 1.6. The build is entirely Java based and works equally well on GNU/Linux, 
Mac OS and Windows, and presumably most any other operating system.

Once Ant has been installed and configured (you may need to set the JAVA_HOME, and ANT_HOME 
environment variables), you should be able to change to the directory containing the build.xml 
file, and invoke the ‘ant’ command. With the default settings, a successful build will result 
in several DataExplorer archives for all supported platforms and architectures in build/target/install
directory.

There are a few Ant "targets" of interest (they can be supplied on the Ant command line):

dist

    This is the default, it build all supported distribution archives.

install

    This will build all distribution archives and install platform and architecture dependent to
    the installation directories configured in build build.properties.

clean

    Deletes all files generated by the build.

The are various "properties" that control what ant does. You can override the on the command line 
or by editing the build.properties file in the same directory as build.xml. For example the build.dir 
directory tells ant where to build temporary files, and where to leave the resulting .jar file. For 
example, to leave the generated files in the sub-directory named BUILD do:

cd build
ant install

A sample build.properties is provided and it contains comments explaining many of the options.

If you change any of the build properties, you will generally want to do an ‘ant clean’ before 
building again as the build is often not able to notice that kind of change. In the case of 
changing a directory path, you would want to do the clean before changing the path.
