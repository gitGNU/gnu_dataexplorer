When you're done, please email it to <gnueval-input@gnu.org> (as plain text).

* General Information
** Do you agree to follow GNU policies?
   If your program is accepted to be part of the GNU system, it means
   that you become a GNU maintainer, which in turn means that you will
   need to follow GNU policies in regards to that GNU program.  
   (Summarized below, see maintainers document for full descriptions.)

** Package name and version: OpenSerialDataExplorer Version 2.1

** Author Full Name <Email>: winfried.bruegmann@gmx.de

** URL to home page (if any): http://bruegmaenner.de/en/winfried/osde/OpenSerialDataExplorer.html

** URL to sources (if any): http://bruegmaenner.de/de/winfried/osde/Source.html

** Brief description of the package:
The OpenSerialDataExplorer is a tool to gather, view and analyze data which comes from devices with a serial data port. 
Views are grahical, tables, statistics, and other.
The application itself runs on several operating system (32/64 Bit Linux and Windows, Mac OS). Devices might be data logger, 
measurement devices, battery charging devices or similar. 
Devices ipmlementations are packages in plug-in to make it independent of the base. The OpenSerialDataExplorer declares a device API 
(IDevice) where others are enabbled with relatively less coding effort to implement own device plug-in.
The program is NLS enabled, available messages are English and German, this is also true for all users documentation. Design material and code documentation is English.

* Code
** Dependencies:
    runtime: eclipse SWT and RXTXcomm package
	build time: SUN JDK, launch4j where the Windows launcher executaable gets build, Microsoft Windows SDK where some native libraries are build

** Configuration & compilation:
    It might or might not use Autoconf/Automake, but it should meet GNU
    Standards.  Even packages which are written in interpreted languages
    and thus do not require compilation, such as Perl, Python, and PHP,
    should follow these standards, so installers have a uniform way to
    set installation directories, etc.  Please see:
    http://www.gnu.org/prep/standards/html_node/Configuration.html
    http://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html
	
	Package gets build by "ant -f build/build.xml all" builds packages for all supported execution platforms, a build.properties needs to set up with build platform information, 
	when installation (copy files) should be processed by build script. The installation directories are hard coded in the ant tasks, this is normally personal preferences.
	For develoment I prefere to use eclipse IDE, where I have debugging capability. For build I have a launcher which comple and package for all supported plarforms.

** Documentation:
    We recommend using Texinfo (http://www.gnu.org/software/texinfo/)
    for documentation, and writing both reference and tutorial
    information in the same manual.  Please see
    http://www.gnu.org/prep/standards/html_node/GNU-Manuals.html

	Online help is available during runtime, users guide is available in HTML or PDF (see referenced home page)

* Licensing:
   This is crucial.  Both the software itself *and all dependencies*
   (third-party libraries, etc.) must be free software in order to be
   included in GNU.  Documentation should be under the GFDL.
   
   Please see http://www.gnu.org/philosophy/license-list.html for a
   practical guide to which licenses are free (for GNU's purposes) and
   which are not.  Please give specific url's to any licenses involved
   that are not listed on that page.


* Similar projects:
   Please explain what motivated you to write your package, and search
   at least the Free Software Directory (http://www.gnu.org/directory/)
   for projects similar to yours.  If any exist, please also explain
   what the principal differences are.
   
   Similar software is available for Windows only see http://logview.info, but no source available. 
   Since there are so many execution problems with LogView and queries to other execution platforms the idea was born to start this project. 
   Some battery charger device manufacturers deliver similar software to support the sold device, but all this supports Windows only.

* Any other information, comments, or questions:

  Refer to my home page to view all the available documentation, like design UML diagrams, Java doc, etc.
  Since I can not keep all execution platforms in form of a native operating system installation or as virtual machine, espacially for MacOS I need feed back from external users.
  This makes development turnaround slow. 
  My hopes making this software open source is that more intrested developers join this project implements devices I do not own, help tranlsate documentation into more languages
  (correct my spelling and grammar).
